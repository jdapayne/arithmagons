/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/fraction.js/fraction.js":
/*!**********************************************!*\
  !*** ./node_modules/fraction.js/fraction.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license Fraction.js v4.0.9 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() {}\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1)\n              n *= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1)\n              d = p1[1];\n          } else {\n            throwInvalidParam();\n          }\n          s = n * d;\n          break;\n        }\n        case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1 /= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n\n              } else {\n\n                if (p1 > M) {\n                  A += C;\n                  B += D;\n                } else {\n                  C += A;\n                  D += B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n *= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n        case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n\n          if (B === null)\n            throwInvalidParam();\n\n          if (B[A] === '-') {// Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {// Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n            if (B[A] !== '.') { // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A += 3;\n            }\n\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A += 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A += 5;\n          }\n\n          if (B.length <= A) { // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n                    n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n            d /= 2) {\n    }\n\n    for (; d % 5 === 0;\n            d /= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n     function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a %= b;\n      if (!a)\n        return b;\n      b %= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n              this[\"d\"] * P[\"n\"]\n              );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n              this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n              P[\"d\"] * this[\"d\"]\n              );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denumerator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n    \n    \"simplify\": function(eps) {\n      \n      // First naive implementation, needs improvement\n      \n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n      \n      eps = eps || 0.001;\n      \n      function rec(a) {\n        if (a.length === 1)\n          return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n      \n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str += N / D | 0;\n\n      N %= D;\n      N *= 10;\n\n      if (N)\n        str += \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--; ) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--; ) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--; ) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return Fraction;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})(this);\n\n\n//# sourceURL=webpack:///./node_modules/fraction.js/fraction.js?");

/***/ }),

/***/ "./src/Question/Arithmagon.js":
/*!************************************!*\
  !*** ./src/Question/Arithmagon.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Arithmagon; });\n/* harmony import */ var Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Utilities/Utilities */ \"./src/Utilities/Utilities.js\");\n/* harmony import */ var fraction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fraction.js */ \"./node_modules/fraction.js/fraction.js\");\n/* harmony import */ var fraction_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fraction_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Utilities/Polynomial */ \"./src/Utilities/Polynomial.js\");\n\n\n\n\nclass Arithmagon {\n  /* Members:\n   * this.op:: Num -> Num .  The operator\n   * this.opname :: String.  The name of the operator\n   * this.vertices :: [{val: Num, hidden: Bool}]. The vertices\n   * this.sides :: [{val: Num, hidden: Bool}]\n   */\n  constructor (options) {\n    const defaults = {\n      min : 0,\n      max : 20,\n      op  : \"add\",\n      n : 3,\n      num_diff: 1, // difficulty of operating on the numbers \n      puz_diff: 1, // difficulty of solving the puzzle\n      type: \"integer\"\n    };\n\n    const settings = Object.assign({},defaults,options);\n\n    this.n = settings.n;\n    this.vertices = [];\n    this.sides = [];\n    if (settings.type.endsWith(\"add\")) {\n      this.opname = \"+\";\n      this.op = (x,y) => x.add(y);\n    } else if (settings.type.endsWith(\"multiply\")) {\n      this.opname = \"\\u00d7\";\n      this.op = (x,y) => x.mul(y);\n    }\n\n    // init sets up operation and vertices\n    switch(settings.type) {\n    case \"integer-add\": \n      case \"integer-multiply\":\n      this.initInteger(settings);\n      break;\n    case \"fraction-add\":\n      this.initFractionAdd(settings);\n      break;\n    case \"fraction-multiply\":\n      this.initFractionMultiply(settings);\n      break;\n    case \"algebra-add\":\n      this.initAlgebraAdd(settings);\n      break;\n    case \"algebra-multiply\":\n      this.initAlgebraMultiply(settings);\n      break;\n    default:\n      throw new Error(\"Unexpected switch default\");\n    }\n\n\n    for (let i = 0; i<this.n; i++) {\n      this.sides[i] = {\n        val: this.op(this.vertices[i].val, this.vertices[(i+1)%this.n].val),\n        hidden: false\n      };\n    }\n\n    // hide vertices/sides\n    switch(settings.puz_diff) {\n    case 1:\n      this.sides.forEach( x => {x.hidden = true;} );\n      break;\n    case 2: {\n      this.sides.forEach( x => {x.hidden = true;} );\n      const showside = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(0,this.n-1,Math.random);\n      const hidevert = Math.random()<0.5 ?\n        showside : // previous vertex\n        (showside + 1)%this.n; //next vertex;\n\n      this.sides[showside].hidden = false;\n      this.vertices[hidevert].hidden = true;\n      break;\n    }\n    case 3:\n      this.vertices.forEach ( x => {x.hidden = true;} );\n      break;\n    default:\n      throw new Error (\"no_difficulty\");\n    }\n  }\n\n  initInteger(settings) {\n    for (let i = 0; i<this.n; i++) {\n      this.vertices[i] = {\n        val: new fraction_js__WEBPACK_IMPORTED_MODULE_1___default.a(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetweenFilter\"])(\n          settings.min,\n          settings.max,\n          x => (settings.type.endsWith(\"add\") || x!==0)\n        )),\n        hidden: false\n      };\n    }\n  }\n\n  initFractionAdd(settings) {\n    /*Difficulty settings:\n     * 1: proper fractions with same denominator, no cancelling after DONE\n     * 2: proper fractions with same denominator, no cancellling answer improper fraction\n     * 3: proper fractions with one denominator a multiple of another, gives proper fraction\n     * 4: proper fractions with one denominator a multiple of another, gives improper fraction\n     * 5: proper fractions with different denominators (not co-prime), gives improper fraction\n     * 6: mixed numbers\n     * 7: mixed numbers, bigger numerators and denominators\n     * 8: mixed numbers, big integer parts\n     */\n\n    // TODO - anything other than difficulty 1.\n    const diff=settings.num_diff;\n    if (diff<3) {\n      const den = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randElem\"])([5,7,9,11,13,17]);\n      for (let i = 0; i<this.n; i++) {\n\n        const prevnum = this.vertices[i-1] ?\n          this.vertices[i-1].val.n : undefined;\n        const nextnum = this.vertices[(i+1)%this.n] ?\n          this.vertices[(i+1)%this.n].val.n : undefined;\n        \n        const maxnum = \n          diff===2? den - 1:\n            nextnum? den - Math.max(nextnum,prevnum):\n              prevnum? den - prevnum:\n                den - 1;\n\n        const num = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetweenFilter\"])(1,maxnum, x => (\n          // Ensures no simplifing afterwards if difficulty is 1\n          Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"gcd\"])(x,den)===1 &&\n          (!prevnum || Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"gcd\"])(x+prevnum,den)===1 || x+prevnum===den) &&\n          (!nextnum || Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"gcd\"])(x+nextnum,den)===1 || x+nextnum===den)\n        ));\n\n        this.vertices[i] = {\n          val: new fraction_js__WEBPACK_IMPORTED_MODULE_1___default.a(num,den),\n          hidden: false\n        };\n      }\n    } else {\n      const denbase = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randElem\"])(\n        diff<7 ? [2,3,5] : [2,3,4,5,6,7,8,9,10,11]\n      );\n      for (let i = 0; i<this.n; i++) {\n        const prev = this.vertices[i-1] ?\n          this.vertices[i-1].val : undefined;\n        const next = this.vertices[(i+1)%this.n] ?\n          this.vertices[(i+1)%this.n].val : undefined;\n\n        const maxmultiplier = diff<7? 4 : 8;\n        \n        const multiplier =\n          i%2===1 || diff>4? Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetweenFilter\"])(2,maxmultiplier,x=>\n            (!prev || x!==prev.d/denbase) &&\n            (!next || x!==next.d/denbase) \n          ) : 1;\n\n        const den = denbase*multiplier;\n\n        let num;\n        if (diff<6) {\n          num = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetweenFilter\"])(1,den-1, x => (\n            Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"gcd\"])(x,den)===1 &&\n            (diff>=4 || !prev || prev.add(x,den)<=1) &&\n            (diff>=4 || !next || next.add(x,den)<=1)\n          ));\n        } else if (diff<8) {\n          num = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetweenFilter\"])(den+1,den*6,x=>Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"gcd\"])(x,den)===1);\n        } else {\n          num = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetweenFilter\"])(den*10,den*100,x=>Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"gcd\"])(x,den)===1);\n        }\n        \n        this.vertices[i] = {\n          val: new fraction_js__WEBPACK_IMPORTED_MODULE_1___default.a(num,den),\n          hidden: false\n        };\n      }\n    }\n  }\n\n  initFractionMultiply(settings){\n    for (let i = 0; i<this.n; i++) {\n      const d = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(2,10);\n      const n = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,d-1);\n      this.vertices[i] = {\n        val: new fraction_js__WEBPACK_IMPORTED_MODULE_1___default.a(n,d),\n        hidden: false\n      };\n    }\n  }\n\n  initAlgebraAdd(settings){\n    const diff=settings.num_diff;\n    switch (diff) {\n      case 1: {\n        const variable = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n        for (let i=0; i<this.n; i++) {\n          const coeff = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n          this.vertices[i] = {\n            val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](coeff + variable),\n            hidden: false\n          };\n        }\n      }\n      break;\n      case 2: \n      default: {\n        if (Math.random()<0.5) { // variable + constant\n          const variable = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n          for (let i=0; i<this.n; i++) {\n            const coeff = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n            const constant = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n            this.vertices[i] = {\n              val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](coeff + variable + \"+\" + constant),\n              hidden: false\n            };\n          }\n        } else {\n          const variable1 = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n          let variable2 = variable1;\n          while (variable2===variable1) {\n            variable2 = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n          }\n\n          for (let i=0; i<this.n; i++) {\n            const coeff1 = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n            const coeff2 = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n            this.vertices[i] = {\n              val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"]( coeff1 + variable1 + \"+\" + coeff2 + variable2),\n              hidden: false\n            };\n          }\n        }\n      break;\n      }\n    }\n  }\n\n  initAlgebraMultiply(settings){\n    /* Difficulty:\n     * 1: Alternate 3a with 4\n     * 2: All terms of the form nv - up to two variables\n     * 3: All terms of the form nv^m. One variable only\n     * 4: ALl terms of the form nx^k y^l z^p. k,l,p 0-3\n     * 5: Expand brackets 3(2x+5)\n     * 6: Expand brackets 3x(2x+5)\n     * 7: Expand brackets 3x^2y(2xy+5y^2)\n     * 8: Expand brackets (x+3)(x+2)\n     * 9: Expand brackets (2x-3)(3x+4)\n     * 10: Expand brackets (2x^2-3x+4)(2x-5)\n     */\n    const diff=settings.num_diff;\n    switch (diff) {\n      case 1: \n        {\n        const variable = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n        for (let i=0; i<this.n; i++) {\n          const coeff = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n          const term = i%2===0? coeff : coeff+variable;\n          this.vertices[i] = {\n            val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](term),\n            hidden: false\n          };\n        }\n      break;\n      }\n\n      case 2: {\n        const variable1 = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n        const variable2 = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n        for (let i=0; i<this.n; i++) {\n          const coeff = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n          const variable = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randElem\"])([variable1,variable2]);\n          this.vertices[i] = {\n            val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](coeff + variable),\n            hidden: false\n          };\n        }\n        break;\n      }\n\n      case 3: {\n        const v = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n        for (let i=0; i<this.n; i++) {\n          const coeff = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n          const idx = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,3).toString()\n          this.vertices[i] = {\n            val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](coeff + v + \"^\" + idx),\n            hidden: false\n          };\n        }\n        break;\n      }\n\n      case 4: {\n        const startAscii = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,120);\n        const v1 = String.fromCharCode(startAscii);\n        const v2 = String.fromCharCode(startAscii+1);\n        const v3 = String.fromCharCode(startAscii+2);\n        for (let i=0; i<this.n; i++) {\n          const a = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n          const n1 = \"^\"+Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(0,3).toString();\n          const n2 = \"^\"+Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(0,3).toString();\n          const n3 = \"^\"+Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(0,3).toString();\n          const term = a+v1+n1+v2+n2+v3+n3;\n          this.vertices[i] = {\n            val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](term),\n            hidden: false\n          };\n        }\n        break;\n      }\n\n      case 5:\n      case 6:\n      default: { // e.g. 3 * (2x-5)\n        const variable = String.fromCharCode(Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(97,122));\n        for (let i=0; i<this.n; i++) {\n          const coeff = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(1,10).toString();\n          const constant = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"randBetween\"])(-9,9).toString();\n          let term = coeff;\n          if (diff===6 || i%2===1) term += variable;\n          if (i%2===1) term += \"+\" + constant;\n          this.vertices[i] = {\n            val: new Utilities_Polynomial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](term),\n            hidden: false\n          };\n        }\n        break;\n      }\n\n    }\n  }\n\n}\n\n\n//# sourceURL=webpack:///./src/Question/Arithmagon.js?");

/***/ }),

/***/ "./src/QuestionView/ArithmagonView.js":
/*!********************************************!*\
  !*** ./src/QuestionView/ArithmagonView.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ArithmagonView; });\n/* harmony import */ var Utilities_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Utilities/Point */ \"./src/Utilities/Point.js\");\n/* harmony import */ var QuestionView_QuestionView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! QuestionView/QuestionView */ \"./src/QuestionView/QuestionView.js\");\n\n\n\nclass ArithmagonView extends QuestionView_QuestionView__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor (question,width,height,rotation) {\n    super(question,width,height,rotation);\n\n    const r = 0.35*Math.min(width,height);\n    const n = this.question.n;\n    \n    this.O = new Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"] (0,0);\n    this.vertices = [];\n    for (let i = 0; i < n; i++) {\n      const angle = i*Math.PI*2/n - Math.PI/2;\n      this.vertices[i] = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromPolar(r,angle);\n    }\n\n    this.sides = [];\n    for (let i = 0; i < n; i++) {\n      this.sides[i] = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mean(this.vertices[i],this.vertices[(i+1)%n]);\n    }\n\n    //this.translate(width/2-this.O.x,height/2-this.O.y);\n    // Center (not just centre of shape)\n    const topleft = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min(this.allpoints);\n    const bottomright = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].max(this.allpoints);\n    const center = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mean(topleft,bottomright);\n    this.translate(width/2-center.x,height/2-center.y); //centre\n\n    this.labels = [];\n    this.question.vertices.forEach( (v,i) => {\n      const value = v.val.toLatex?\n        v.val.toLatex(true):\n        v.val.toString();\n      this.labels.push({\n        pos: this.vertices[i],\n        textq: v.hidden? \"\" : value,\n        texta: value,\n        styleq: \"normal vertex\",\n        stylea: v.hidden? \"answer vertex\" : \"normal vertex\"\n      });\n    });\n\n    this.question.sides.forEach( (v,i) => {\n      const value = v.val.toLatex?\n        v.val.toLatex(true):\n        v.val.toString();\n      this.labels.push({\n        pos: this.sides[i],\n        textq: v.hidden? \"\" : value,\n        texta: value,\n        styleq: \"normal side\",\n        stylea: v.hidden? \"answer side\" : \"normal side\"\n      });\n    });\n\n    this.labels.push({\n      pos: this.O,\n      textq: this.question.opname,\n      texta: this.question.opname,\n      styleq: \"normal\",\n      stylea: \"normal\"\n    });\n\n    this.labels.forEach( l => {\n      l.text = l.textq;\n      l.style = l.styleq;\n    });\n\n  }\n\n  get allpoints() {\n    return [this.O]\n      .concat(this.vertices)\n      .concat(this.sides);\n  }\n\n  drawIn(canvas) {\n    const ctx = canvas.getContext(\"2d\");\n    const n = this.question.n;\n\n    // clear the canvas and any html labels\n    ctx.clearRect(0,0,canvas.width,canvas.height); // clear\n    const htmlLabels = canvas.parentNode.getElementsByClassName(\"label\");\n    while (htmlLabels.length > 0) {\n      htmlLabels[0].remove();\n    }\n\n    ctx.beginPath();\n    for (let i = 0; i<n; i++) {\n      const p = this.vertices[i];\n      const next = this.vertices[(i+1)%n];\n      ctx.moveTo(p.x,p.y);\n      ctx.lineTo(next.x,next.y);\n    }\n    ctx.stroke();\n    ctx.closePath();\n\n    this.drawLabelsHtml(canvas);\n\n  }\n}\n\n\n//# sourceURL=webpack:///./src/QuestionView/ArithmagonView.js?");

/***/ }),

/***/ "./src/QuestionView/QuestionView.js":
/*!******************************************!*\
  !*** ./src/QuestionView/QuestionView.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return QuestionView; });\n/* harmony import */ var Utilities_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Utilities/Point */ \"./src/Utilities/Point.js\");\n\n\nclass QuestionView {\n  constructor(question,width,height,rotation) {\n    this.question = question;\n    this.width = width;\n    this.height = height;\n    this.answered = false;\n    this.rotation = rotation;\n    this.success = true;\n    this.labels = [];\n  }\n\n  /* * * Abstract methods   * * */\n  /**/                        /**/\n  /**/  get allpoints () {    /**/\n  /**/      return [];        /**/\n  /**/  }                     /**/\n  /**/                        /**/\n  /*    drawIn(canvas) {}       */\n  /**/                        /**/\n  /* * * * * * * * * * * * * *  */\n  showAnswer() {\n    if (this.answered) return; //nothing to do\n    this.labels.forEach( l => {\n      l.text = l.texta;\n      l.style = l.stylea;\n    });\n    return this.answered = true;\n  }\n\n  hideAnswer() {\n    if (!this.answered) return; //nothing to do\n    this.labels.forEach( l => {\n      l.text = l.textq;\n      l.style = l.styleq;\n    });\n    return this.answered = false;\n  }\n\n  toggleAnswer() {\n    if (this.answered) return this.hideAnswer();\n    else return this.showAnswer();\n  }\n\n  scale(sf) {\n    this.allpoints.forEach(function(p){\n      p.scale(sf);\n    });\n  }\n\n  rotate(angle) {\n    this.allpoints.forEach(function(p){\n      p.rotate(angle);\n    });\n    return angle;\n  }\n\n  translate(x,y) {\n    this.allpoints.forEach(function(p){\n      p.translate(x,y);\n    });\n  }\n\n  randomRotate() {\n    var angle=2*Math.PI*Math.random();\n    this.rotate(angle);\n    return angle;\n  }\n\n  scaleToFit(width,height,margin) {\n    let topleft = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min(this.allpoints);\n    let bottomright = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].max(this.allpoints);\n    let t_width = bottomright.x - topleft.x;\n    let t_height = bottomright.y - topleft.y;\n    this.scale(Math.min((width-margin)/t_width,(height-margin)/t_height));\n\n    // centre\n    topleft = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min(this.allpoints);\n    bottomright = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].max(this.allpoints);\n    const center = Utilities_Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mean([topleft,bottomright]);\n    this.translate(width/2-center.x,height/2-center.y); //centre\n  }\n\n  drawLabelsCanvas(canvas) {\n    const ctx = canvas.getContext(\"2d\");\n    this.labels.forEach(function(l){\n      ctx.font = QuestionView.styles.get(l.style).font;\n      ctx.fillStyle = QuestionView.styles.get(l.style).colour;\n      ctx.textAlign = QuestionView.styles.get(l.style).align;\n      ctx.textBaseline = QuestionView.styles.get(l.style).baseline;\n      ctx.fillText(l.text,l.pos.x,l.pos.y);\n    });\n  }\n\n  drawLabelsHtml(canvas) {\n    const container = canvas.parentNode;\n    this.labels.forEach(function(l){\n      const label = document.createElement(\"div\");\n      const innerlabel = document.createElement(\"div\");\n      label.classList.add(\"label\");\n      label.classList += \" \" + l.style;\n      label.style.left = l.pos.x + \"px\";\n      label.style.top = l.pos.y + \"px\";\n\n      katex.render(l.text, innerlabel);\n      label.appendChild(innerlabel);\n      container.appendChild(label);\n    });\n  }\n}\n\nQuestionView.styles = new Map([\n  [\"normal\" , {font: \"16px Arial\", colour: \"Black\", align: \"center\", baseline: \"middle\"}],\n  [\"answer\" , {font: \"16px Arial\", colour: \"Red\", align: \"center\", baseline: \"middle\"}],\n  [\"extra-answer\", {font: \"16px Arial\", colour: \"Red\", align: \"left\", baseline: \"bottom\"}],\n  [\"extra-info\", {font: \"16px Arial\", colour: \"Black\", align: \"left\", baseline: \"bottom\"}]\n]);\n\n\n//# sourceURL=webpack:///./src/QuestionView/QuestionView.js?");

/***/ }),

/***/ "./src/Utilities/Monomial.js":
/*!***********************************!*\
  !*** ./src/Utilities/Monomial.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Monomial; });\nclass Monomial {\n    constructor(c,vs) {\n        if (!isNaN(c) && vs instanceof Map) {\n            this.c = c;\n            this.vs = vs;\n        } else if (typeof c === \"string\") {\n            this.initStr(c);\n        } else if (!isNaN(c)) {\n            this.c = c;\n            this.vs = new Map();\n        } else { //default as a test: 4x^2y\n            this.c = 4;\n            this.vs = new Map([ [\"x\",2] , [\"y\",1] ]);\n        }\n    }\n\n    clone() {\n        const vs = new Map(this.vs);\n        return new Monomial(this.c,vs);\n    }\n\n    mul(that) {\n        if (!(that instanceof Monomial)) {\n            that = new Monomial(that)\n        }\n        const c = this.c*that.c;\n        let vs = new Map();\n        this.vs.forEach( (index,variable) => {\n            if (that.vs.has(variable)) {\n                vs.set(variable, this.vs.get(variable)+that.vs.get(variable));\n            } else {\n                vs.set(variable, this.vs.get(variable))\n            }\n        });\n        \n        that.vs.forEach( (index,variable) => {\n            if (!vs.has(variable)) {\n                vs.set(variable, that.vs.get(variable))\n            }\n        });\n        vs = new Map([...vs.entries()].sort())\n        return new Monomial(c,vs);\n    }\n\n    toLatex() {\n        if (this.vs.size===0) return this.c.toString()\n        let str = this.c===1 ? \"\" :\n                  this.c===-1 ? \"-\" :\n                  this.c.toString();\n        this.vs.forEach( (index,variable) => {\n            if (index===1) {\n                str += variable;\n            } else {\n                str += variable + \"^\" + index;\n            }\n        });\n        return str;\n    }\n\n    sort() {\n        // sorts (modifies object)\n        this.vs = new Map([...this.vs.entries()].sort());\n    }\n\n    cleanZeros() {\n        this.vs.forEach( (idx,v) => {\n            if (idx===0) this.vs.delete(v)\n        });\n    }\n\n    like(that) {\n        // return true if like terms, false if otherwise\n        // not the most efficient at the moment, but good enough.\n        if (!(that instanceof Monomial)) {\n            that = new Monomial(that)\n        }\n\n        let like = true;\n        this.vs.forEach( (index,variable) => {\n            if (!that.vs.has(variable) || that.vs.get(variable) !== index) {\n                like = false;\n            }\n        });\n        that.vs.forEach( (index,variable) => {\n            if (!this.vs.has(variable) || this.vs.get(variable) !== index) {\n                like = false;\n            }\n        });\n        return like;\n    }\n\n    add(that,checkLike) {\n        if (!(that instanceof Monomial)) {\n            that = new Monomial(that)\n        }\n        // adds two compatible monomials\n        // checkLike (default true) will check first if they are like and throw an exception\n        // undefined behaviour if checkLike is false\n        if (checkLike === undefined) checkLike = true;\n        if (checkLike && !this.like(that)) throw new Error(\"Adding unlike terms\");\n        const c = this.c + that.c;\n        const vs = this.vs; \n        return new Monomial(c,vs);\n    }\n\n    initStr(str) {\n        //currently no error checking and fragile\n        //Things not to pass in:\n        //  zero indices\n        //  multi-character variables\n        //  negative indices\n        //  non-integer coefficients\n        const lead = str.match(/^-?\\d*/)[0];\n        const c = lead === \"\" ?  1:\n                  lead === \"-\"  ? -1:\n                  parseInt(lead);\n        let vs = str.match(/([a-zA-Z])(\\^\\d+)?/g);\n        if (!vs) vs = [];\n        for (let i=0; i<vs.length; i++) {\n            let v = vs[i].split(\"^\");\n            v[1] = v[1] ? parseInt(v[1]) : 1;\n            vs[i] = v;\n        }\n        vs = vs.filter( v => v[1]!==0 );\n        this.c = c;\n        this.vs = new Map(vs);\n    }\n\n    static var(v) {\n        //factory for a single variable monomial\n        const c = 1;\n        const vs = new Map([[v,1]]);\n        return new Monomial(c,vs);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/Utilities/Monomial.js?");

/***/ }),

/***/ "./src/Utilities/Point.js":
/*!********************************!*\
  !*** ./src/Utilities/Point.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Point; });\nclass Point {\n  constructor (x,y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  rotate (angle) {\n    var newx, newy;\n    newx = Math.cos(angle)*this.x - Math.sin(angle)*this.y;\n    newy = Math.sin(angle)*this.x + Math.cos(angle)*this.y;\n    this.x = newx;\n    this.y = newy;\n    return this;\n  }\n\n  scale (sf) {\n    this.x = this.x * sf;\n    this.y = this.y * sf;\n    return this;\n  }\n\n  translate(x,y) {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  clone() {\n    return new Point(this.x,this.y);\n  }\n\n  equals(that) {\n    return (this.x === that.x && this.y === that.y);\n  }\n\n  moveToward(that,d) {\n    // moves [d] in the direction of [that::Point]\n    const uvec = Point.unitVector(this,that);\n    this.translate(uvec.x*d,uvec.y*d);\n    return this;\n  }\n\n  static fromPolar (r,theta) {\n    return new Point(\n      Math.cos(theta)*r,\n      Math.sin(theta)*r\n    );\n  }\n\n  static fromPolarDeg (r,theta) {\n    theta = theta*Math.PI/180;\n    return Point.fromPolar(r,theta);\n  }\n\n  static mean(...points) {\n    let sumx = points.map(p => p.x).reduce((x,y)=>x+y);\n    let sumy = points.map(p => p.y).reduce((x,y)=>x+y);\n    let n = points.length;\n\n    return new Point(sumx/n,sumy/n);\n  }\n\n  static min(points) {\n    let minx = points.reduce((x,p)=>Math.min(x,p.x),Infinity);\n    let miny = points.reduce((y,p)=>Math.min(y,p.y),Infinity);\n    return new Point(minx,miny);\n  }\n        \n  static max(points) {\n    let maxx = points.reduce((x,p)=>Math.max(x,p.x),-Infinity);\n    let maxy = points.reduce((y,p)=>Math.max(y,p.y),-Infinity);\n    return new Point(maxx,maxy);\n  }\n\n  static center(points) {\n    const minx = points.reduce((x,p)=>Math.min(x,p.x),Infinity);\n    const miny = points.reduce((y,p)=>Math.min(y,p.y),Infinity);\n    const maxx = points.reduce((x,p)=>Math.max(x,p.x),-Infinity);\n    const maxy = points.reduce((y,p)=>Math.max(y,p.y),-Infinity);\n    return new Point( (maxx + minx)/2 , (maxy+miny)/2);\n  }\n\n  static unitVector(p1, p2) {\n    // returns a unit vector in the direction of p1 to p2\n    // in the form {x:..., y:...}\n    const vecx = p2.x - p1.x;\n    const vecy = p2.y - p1.y;\n    const length = Math.hypot(vecx,vecy);\n    return {x: vecx/length, y: vecy/length};\n  }\n\n  static distance(p1,p2) {\n    return Math.hypot(p1.x-p2.x,p1.y-p2.y);\n  }\n\n  static repel(p1,p2,trigger,distance) {\n    // When p1 and p2 are less than [trigger] apart, they are\n    // moved so that they are [distance] apart\n    const d = Math.hypot(p1.x-p2.x,p1.y-p2.y);\n    if (d >= trigger) return false;\n\n    const r = (distance-d)/2; // distance they need moving\n    p1.moveToward(p2,-r);\n    p2.moveToward(p1,-r);\n    return true;\n  }\n}\n\n\n//# sourceURL=webpack:///./src/Utilities/Point.js?");

/***/ }),

/***/ "./src/Utilities/Polynomial.js":
/*!*************************************!*\
  !*** ./src/Utilities/Polynomial.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Polynomial; });\n/* harmony import */ var Utilities_Monomial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Utilities/Monomial */ \"./src/Utilities/Monomial.js\");\n\n\nclass Polynomial {\n    constructor (terms) {\n        if (Array.isArray(terms) && (terms[0] instanceof Utilities_Monomial__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n            terms.map( t => t.clone());\n            this.terms = terms\n        } else if (!isNaN(terms)) {\n            this.initNum(terms);\n        } else if (typeof terms === \"string\") {\n            this.initStr(terms);\n        }\n    }\n\n    initStr(str) {\n        str = str.replace(/\\+-/g,\"-\"); // a horrible bodge\n        str = str.replace(/-/g,\"+-\"); // make negative terms explicit.\n        str = str.replace(/\\s/g,\"\"); // strip whitespace\n        this.terms = str.split(\"+\")\n            .map( s => new Utilities_Monomial__WEBPACK_IMPORTED_MODULE_0__[\"default\"](s) )\n            .filter( t => t.c !== 0);\n    }\n\n    initNum(n) {\n        this.terms = [new Utilities_Monomial__WEBPACK_IMPORTED_MODULE_0__[\"default\"](n)];\n    }\n\n    toLatex() {\n        let str = \"\";\n        for (let i=0; i<this.terms.length; i++) {\n            if (i>0 && this.terms[i].c >= 0 ) {\n                str += \"+\"\n            }\n            str += this.terms[i].toLatex();\n        }\n        return str;\n    }\n\n    toString() {\n        return this.toLaTeX();\n    }\n\n    clone() {\n        const terms = this.terms.map( t=> t.clone() );\n        return new Polynomial(terms);\n    }\n\n    simplify() {\n        // collects like terms and removes zero terms\n        // does not modify original\n        // This seems probably inefficient, given the data structure\n        // Would be better to use something like a linked list maybe?\n        let terms = this.terms.slice();\n        let newterms = [];\n        for (let i=0; i<terms.length; i++) {\n            if (!terms[i]) continue;\n            let newterm = terms[i];\n            for (let j=i+1; j<terms.length; j++) {\n                if (!terms[j]) continue;\n                if (terms[j].like(terms[i])) {\n                    newterm = newterm.add(terms[j])\n                    terms[j] = null;\n                }\n            }\n            newterms.push(newterm);\n            terms[i] = null;\n        }\n        newterms = newterms.filter( t => t.c !== 0 );\n        return new Polynomial(newterms);\n    }\n\n    add(that,simplify) {\n        if (!(that instanceof Polynomial)) {\n            that = new Polynomial(that)\n        }\n        if (simplify===undefined) simplify = true;\n        let terms = this.terms.concat(that.terms);\n        let result = new Polynomial(terms);\n\n        if (simplify) result = result.simplify();\n\n        return result;\n    }\n\n    mul(that,simplify) {\n        if (!(that instanceof Polynomial)) {\n            that = new Polynomial(that)\n        }\n        let terms = [];\n        if (simplify===undefined) simplify = true;\n        for (let i=0; i<this.terms.length; i++) {\n        for (let j=0; j<that.terms.length; j++) {\n            terms.push(this.terms[i].mul(that.terms[j]));\n        }\n        }\n\n        let result = new Polynomial(terms);\n        if (simplify) result = result.simplify();\n\n        return result;\n    }\n\n    pow(n,simplify) {\n        let result = this;\n        for (let i=1;i<n;i++) {\n            result = result.mul(this);\n        }\n        if (simplify) result = result.simplify();\n        return result;\n    }\n\n    static var(v) {\n        //factory for a single variable polynomial\n        terms = [Utilities_Monomial__WEBPACK_IMPORTED_MODULE_0__[\"default\"].var(v)];\n        return new Polynomial(terms);\n    }\n\n    static x() {\n        return Polynomial.var(\"x\");\n    }\n\n    static const(n) {\n        return new Polynomial(n);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/Utilities/Polynomial.js?");

/***/ }),

/***/ "./src/Utilities/Utilities.js":
/*!************************************!*\
  !*** ./src/Utilities/Utilities.js ***!
  \************************************/
/*! exports provided: randBetween, randBetweenFilter, randMultBetween, randElem, roundToTen, roundDP, degToRad, sinDeg, cosDeg, scaledStr, gcd, lcm, sortTogether, shuffle, weakIncludes, firstUniqueIndex, propByString, mIf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randBetween\", function() { return randBetween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randBetweenFilter\", function() { return randBetweenFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randMultBetween\", function() { return randMultBetween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randElem\", function() { return randElem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"roundToTen\", function() { return roundToTen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"roundDP\", function() { return roundDP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"degToRad\", function() { return degToRad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sinDeg\", function() { return sinDeg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cosDeg\", function() { return cosDeg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaledStr\", function() { return scaledStr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gcd\", function() { return gcd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lcm\", function() { return lcm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sortTogether\", function() { return sortTogether; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shuffle\", function() { return shuffle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"weakIncludes\", function() { return weakIncludes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstUniqueIndex\", function() { return firstUniqueIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"propByString\", function() { return propByString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mIf\", function() { return mIf; });\n/* RNGs / selectors */\nfunction gaussian(n) {\n  let rnum = 0;\n  for (let i = 0; i<n; i++) {\n    rnum += Math.random();\n  }\n  return rnum/n;\n}\n\nfunction randBetween(n,m,dist) {\n  // return a random integer between n and m inclusive\n  // dist (optional) is a function returning a value in [0,1)\n  // default is slightly biased towards middle\n  if (!dist) dist = Math.random;\n  return n+Math.floor(dist()*(m-n+1));\n}\n\nfunction randBetweenFilter(n,m,filter) {\n  /* returns a random integer between n and m inclusive which satisfies the filter\n  /  n, m: integer \n  /  filter: Int-> Bool\n  */\n  let arr = [];\n  for (let i=n; i<m+1; i++) {\n    if (filter(i)) arr.push(i);\n  }\n  if (arr===[]) throw new Error(\"overfiltered\");\n  const i = randBetween(0,arr.length-1);\n  return arr[i];\n}\n\nfunction randMultBetween(min,max,n) {\n  //return a random multiple of n between n and m (inclusive if possible)\n  min = Math.ceil(min/n)*n;\n  max = Math.floor(max/n)*n; // could check divisibility first to maximise performace, but I'm sure the hit isn't bad\n    \n  return randBetween(min/n,max/n)*n;\n}\n\nfunction randElem(array,dist) {\n  if ([...array].length === 0) throw \"empty array\";\n  if (!dist) dist = Math.random;\n  const n = array.length || array.size;\n  let i = randBetween(0,n-1,dist);\n  return [...array][i];\n}\n\n/* Maths */\nfunction roundToTen (n) {\n  return Math.round(n/10)*10;\n}\n\nfunction roundDP (x,n) {\n  return Math.round(x*Math.pow(10,n))/Math.pow(10,n);\n}\n\nfunction degToRad(x) {\n  return x*Math.PI/180;\n}\n\nfunction sinDeg(x) {\n  return Math.sin(x*Math.PI/180);\n}\n\nfunction cosDeg(x) {\n  return Math.cos(x*Math.PI/180);\n}\n\nfunction scaledStr(n,dp) {\n  // returns a string representing n/10^dp\n  // e.g. scaledStr(34,1)=\"3.4\"\n  // scaledStr(314,2)=\"3.14\"\n  // scaledStr(30,1)=\"3\"\n  // Trying to avoid precision errors!\n  if (dp===0) return n;\n  const factor = Math.pow(10,dp);\n  const intpart = Math.floor(n/factor);\n  const decpart = n%factor;\n  if (decpart===0) {\n    return intpart;\n  } else {\n    return intpart + \".\" + decpart;\n  }\n}\n\nfunction gcd(a, b) {\n  // taken from fraction.js\n  if (!a)\n    return b;\n  if (!b)\n    return a;\n\n  while (1) {\n    a %= b;\n    if (!a)\n      return b;\n    b %= a;\n    if (!b)\n      return a;\n  }\n};\n\nfunction lcm(a,b) {\n  return a*b/gcd(a,b);\n}\n\n/* Arrays */\nfunction sortTogether(arr0, arr1,f) {\n  if (arr0.length !== arr0.length) {\n    throw new TypeError (\"Both arguments must be arrays of the same length\");\n  }\n\n  const n = arr0.length;\n  let combined = [];\n  for (let i=0; i<n; i++) {\n    combined[i] = [arr0[i],arr1[i]];\n  }\n\n  combined.sort( (x,y) => f(x[0],y[0]) );\n    \n  for (let i=0; i<n; i++) {\n    arr0[i] = combined[i][0];\n    arr1[i] = combined[i][1];\n  }\n\n  return [arr0,arr1];\n}\n\nfunction shuffle(array) {\n  // Knuth-Fisher-Yates\n  // from https://stackoverflow.com/a/2450976/3737295\n  // nb. shuffles in place\n  var currentIndex = array.length, temporaryValue, randomIndex;\n  \n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n  \n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n  \n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  \n  return array;\n}\n\nfunction weakIncludes(a,e) {\n  return (Array.isArray(a) && a.includes(e));\n}\n\nfunction firstUniqueIndex(array) {\n  // returns index of first unique element\n  // if none, returns length of array\n  let i=0;\n  while (i<array.length) {\n    if (array.indexOf(array[i]) === array.lastIndexOf(array[i])) {\n      break;\n    }\n    i++;\n  }\n  return i;\n}\n\n/* Object property access by string */\nfunction propByString (o, s, x) {\n  /* E.g. byString(myObj,\"foo.bar\") -> myObj.foo.bar\n     * byString(myObj,\"foo.bar\",\"baz\") -> myObj.foo.bar = \"baz\"\n     */\n  s = s.replace(/\\[(\\w+)\\]/g, \".$1\"); // convert indexes to properties\n  s = s.replace(/^\\./, \"\");           // strip a leading dot\n  var a = s.split(\".\");\n  for (var i = 0, n = a.length - 1; i < n; ++i) {\n    var k = a[i];\n    if (k in o) {\n      o = o[k];\n    } else {\n      return;\n    }\n  }\n  if (x === undefined) return o[a[n]];\n  else o[a[n]] = x;\n}\n\n/* Logic */\nfunction mIf (p,q) { //material conditional\n  return (!p||q);\n}\n\n\n//# sourceURL=webpack:///./src/Utilities/Utilities.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return App; });\n/* harmony import */ var Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Utilities/Utilities */ \"./src/Utilities/Utilities.js\");\n/* harmony import */ var Question_Arithmagon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Question/Arithmagon */ \"./src/Question/Arithmagon.js\");\n/* harmony import */ var QuestionView_ArithmagonView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! QuestionView/ArithmagonView */ \"./src/QuestionView/ArithmagonView.js\");\n\n\n\n\nwindow.addEventListener(\"DOMContentLoaded\", function () {\n  App.init();\n});\n\nfunction App () {\n  return;\n}\n\n/* Initialisation: Sets up click handlers etc */\nApp.init = function () {\n  App.settings.toPage();\n\n  document.getElementById(\"generate\").addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    App.generateAll();\n  });\n\n  document.getElementById(\"print\").addEventListener(\"click\", function(e) {\n    window.print();\n    e.preventDefault();\n  });\n\n  document.getElementById(\"showoptions\").addEventListener(\"click\",App.toggleOptions);\n\n  document.getElementById(\"display-box\").addEventListener(\"click\", function(e) {\n    let elem = e.target;\n    if (elem.classList.contains(\"refresh\")) {\n      let q_container = elem.closest(\".question-container\");\n      let q_index = q_container.dataset.question_index;\n      App.hideAnswer(q_index);\n      App.generate(q_index);\n    } else if (elem.classList.contains(\"answer-toggle\")) {\n      let q_container = elem.closest(\".question-container\");\n      let q_index = q_container.dataset.question_index;\n      App.toggleAnswer(q_index,elem);\n    }\n  });\n\n  document.getElementById(\"show-answers\").addEventListener(\"click\",App.toggleAllAnswers);\n\n  document.addEventListener(\"change\", function(e) {\n    App.settings.fromPage();\n    if (e.target.name === \"options-type\") {\n      App.toggleHidden([\"options-advanced\",\"options-simple\"]);\n    }\n  });\n\n  document.getElementById(\"zoom\").addEventListener(\"click\", function(e) {\n    const elem = e.target;\n    if (elem.id === \"zoomin\") {\n      App.zoom(1);\n    } else if (elem.id == \"zoomout\") {\n      App.zoom(-1);\n    }\n  });\n\n  document.body.addEventListener(\"click\", function (event) {\n    const e = event.target;\n    if (e.dataset.modal) {App.modalOpen(e.dataset.modal); event.preventDefault();}\n  });\n\n  document.getElementById(\"modal-overlay\").addEventListener(\"click\", function (event) {\n    if (event.target.closest(\".modal\")) return;\n    App.modalClose();\n  });\n};\n/* * * * * * * * * * * * * * * * * * * * * * * */\n\n/* UI control */\nApp.toggleOptions = function (e) {\n  let showoptions = document.getElementById(\"showoptions\");\n  let is_hidden = document.getElementById(\"options\").classList.toggle(\"hidden\");\n\n  if (is_hidden) {\n    showoptions.innerHTML = \"Show options\";\n  } else {\n    showoptions.innerHTML = \"Hide options\";\n  }\n\n  if (e) {e.preventDefault();}\n};\n\nApp.toggleAnswer = function (i) {\n  let answered = App.questions[i].viewobject.toggleAnswer();\n  App.draw(i);\n  let container = App.questions[i].container;\n  container.classList.toggle(\"answer\");\n  let toggle = container.querySelector(\".answer-toggle\");\n  if (answered) {\n    toggle.innerHTML = \"Hide answer\";\n  } else {\n    toggle.innerHTML = \"Show answer\";\n  }\n  //MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,container]);\n};\n\nApp.showAnswer = function (i) {\n  App.questions[i].viewobject.showAnswer();\n  App.draw(i);\n  let container = App.questions[i].container;\n  container.classList.add(\"answer\");\n  container.querySelector(\".answer-toggle\").innerHTML = \"Hide answer\";\n};\n\nApp.hideAnswer = function (i) {\n  App.questions[i].viewobject.hideAnswer();\n  App.draw(i);\n  let container = App.questions[i].container;\n  container.classList.remove(\"answer\");\n  container.querySelector(\".answer-toggle\").innerHTML = \"Show answer\";\n};\n\nApp.hideAllAnswers = function () {\n  App.questions.forEach( function(q,i) { App.hideAnswer(i); });\n  document.getElementById(\"show-answers\").innerHTML = \"Show answers\";\n  App.answered = false;\n  //MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,\"display-box\"]);\n};\n\nApp.showAllAnswers = function () {\n  App.questions.forEach( function(q,i) { App.showAnswer(i); });\n  document.getElementById(\"show-answers\").innerHTML = \"Hide answers\";\n  App.answered = true;\n  //MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,\"display-box\"]);\n};\n\nApp.toggleAllAnswers = function (e) {\n  if (App.answered) App.hideAllAnswers();\n  else App.showAllAnswers();\n  if (e) {e.preventDefault();}\n};\n\nApp.answered = false;\n/* * * * * * * * * * * * * * * * * * * * * * * */\n\n/* * * Question drawing control * * */\nApp.clear = function () {\n  document.getElementById(\"display-box\").innerHTML = \"\";\n  App.questions = []; // cross fingers that no memory leaks occur\n  //dunno if this should go here or somewhere else...\n  document.getElementById(\"show-answers\").removeAttribute(\"disabled\");\n  App.hideAllAnswers();\n};\n\nApp.draw = function (i) {\n  // redraws ith question\n  const view = App.questions[i].viewobject;\n  const canvas = App.questions[i].container.querySelector(\"canvas\");\n  view.drawIn(canvas);\n};\n\nApp.reDraw = function (x) {\n  // x is either index of a question, or an App.questions object\n  // re-generates view for ith question and draws it\n  // Mainly used for when widh/height changes\n\n  const q = typeof(x) === \"number\" ? App.questions[x] : x;\n\n  const canvas = q.container.querySelector(\"canvas\");\n  canvas.width = App.settings.canvas_width;\n  canvas.height = App.settings.canvas_height;\n\n  const oldview = q.viewobject;\n  const question = oldview.question;\n  const newview = new QuestionView_ArithmagonView__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\n    question,\n    App.settings.canvas_width,\n    App.settings.canvas_height\n  );\n\n  q.viewobject = newview;\n  newview.drawIn(canvas);\n};\n\nApp.drawAll = function () {\n  App.questions.forEach( function (q) {\n    const view = q.viewobject;\n    const canvas = q.container.querySelector(\"canvas\");\n    view.drawIn(canvas);\n  });\n};\n\nApp.generate = function (i) {\n  // Generates a question and represents it at the given index\n  const n = App.settings.n_questions;\n  const mindiff = App.settings.mindiff;\n  const maxdiff = App.settings.maxdiff;\n  const diff = mindiff + Math.floor(i*(maxdiff-mindiff+1)/n);\n\n  const options = Object.assign({},App.settings.options,{num_diff:diff});\n\n  const question = new Question_Arithmagon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options);\n  const view = new QuestionView_ArithmagonView__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\n    question,\n    App.settings.canvas_width,\n    App.settings.canvas_height\n  );\n\n  App.questions[i] = Object.assign({},App.questions[i], {\n    viewobject: view,\n    type: question.type,\n    subtype: question.subtype\n  });\n\n  App.draw(i);\n};\n\nApp.generateAll = function () {\n  App.clear();\n  // Create containers for questions and generate a question in each container\n  let n = App.settings.n_questions;\n  const time_message=\"generate \" + n + \" questions\";\n  console.time(time_message);\n  for (let i=0; i<n; i++) {\n    // Make DOM elements\n    let container = document.createElement(\"div\");\n    container.className = \"question-container\";\n    container.dataset.question_index = i;\n\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = App.settings.canvas_width;\n    canvas.height = App.settings.canvas_height;\n    canvas.className = \"question-view\";\n    container.append(canvas);\n\n    let refresh = document.createElement(\"img\");\n    refresh.src = \"refresh.png\"; // might be better to do something clever with webpack\n    refresh.className = \"refresh\";\n    refresh.width = 15;\n    refresh.height = 15;\n    container.append(refresh);\n\n    let answer_toggle = document.createElement(\"div\");\n    answer_toggle.innerHTML = \"Show answer\";\n    answer_toggle.className = \"answer-toggle\";\n    container.append(answer_toggle);\n\n    document.getElementById(\"display-box\").append(container);\n\n    App.questions[i] = Object.assign({},App.questions[i], {\n      container: container\n    });\n\n    // Make question and question view\n    App.generate(i);\n  }\n  console.timeEnd(time_message);\n  //MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,\"display-box\"]);\n};\n/* * * * * * * * * * * * * * * * * * * * */\n\nApp.zoom = function (sign) {\n  App.settings.zoom += sign*0.1;\n  App.settings.canvas_width = App.settings.canvas_width_base * App.settings.zoom;\n  App.settings.canvas_height = App.settings.canvas_height_base * App.settings.zoom;\n\n  App.questions.forEach( function (q) {\n    App.reDraw(q);\n  });\n  //MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,\"display-box\"]);\n};\n\n/* * * Data on generated questions * * *\n *******************************************************************************************************\n * Example:\n * App.questions =\n *  [\n *      {shape: \"triangle\", type: \"area\", viewobject: [QuestionView object], container: [Node]},\n *  ]\n *\n */  App.questions = [];\n/*\n/********************************************************************************************************/\n\n/* * * Settings related * * */\nApp.settings = {\n  canvas_width_base: 250,\n  canvas_height_base: 250,\n  canvas_width: 250,\n  canvas_height: 250,\n  zoom: 1,\n  mindiff: 1,\n  maxdiff: 5,\n  options: {\n    min: -20,\n    max: 20,\n    n: 3,\n    num_diff: 2,\n    puz_diff: 1,\n    op: \"add\",\n    type: \"integer\"\n  },\n  n_questions: 8,\n  debug: true\n};\n\nApp.settings.fromPage = function() {\n  const formOptions = document.getElementsByClassName(\"option\");\n  for (let i = 0, n=formOptions.length; i<n; ++i) {\n    const settingElem = formOptions[i];\n    const value = isNaN(settingElem.value) ? \n      settingElem.value : Number(settingElem.value);\n    let setting = settingElem.dataset.setting;\n    //TODO: Make it work with radio buttons\n    if (setting.endsWith(\"[]\")) { //modify a set from checkboxes\n      setting = setting.slice(0,-2);\n      if (!Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting)) Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting, new Set());\n      // TODO: convert array to Set if needed\n      if (settingElem.checked) Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting).add(value);\n      else Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting).delete(value);\n    } else if (settingElem.type === \"checkbox\") {\n      Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting,settingElem.checked?true:false);\n    } else if (settingElem.checked || (settingElem.type !== \"radio\" && settingElem.type !== \"checkbox\")) {\n      Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting,value);\n    }\n  }\n};\n\nApp.settings.toPage = function() {\n  const formOptions = document.getElementsByClassName(\"option\");\n  for (let i = 0, n=formOptions.length; i<n; ++i) {\n    const settingElem = formOptions[i];\n    const value = settingElem.value;\n    let setting = settingElem.dataset.setting;\n    if (setting.endsWith(\"[]\")) { //modify a set from checkboxes\n      setting = setting.slice(0,-2);\n      // TODO: convert array to Set if needed\n      if (Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting).has(value)) settingElem.checked = true;\n      else settingElem.checked = false;\n    } else if (settingElem.type === \"radio\") {\n      if (Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting) === value) settingElem.checked = true;\n    } else if (settingElem.type === \"checkbox\") {\n      settingElem.checked = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting)? true : false;\n    } else {\n      settingElem.value = Object(Utilities_Utilities__WEBPACK_IMPORTED_MODULE_0__[\"propByString\"])(this,setting);\n    }\n  }\n};\n\nApp.modalOpen = function (id) {\n  const modal = document.getElementById(id) || document.getElementById(\"default-modal\");\n  if (modal.classList.contains(\"modal\")) {\n    const overlay = document.getElementById(\"modal-overlay\");\n    overlay.appendChild(modal);\n    overlay.classList.remove(\"hidden\");\n  }\n};\n\nApp.modalClose = function () {\n  const overlay = document.getElementById(\"modal-overlay\");\n  const children = overlay.getElementsByClassName(\"modal\");\n  while (children.length > 0) {\n    document.body.appendChild(children[0]);\n  }\n  overlay.classList.add(\"hidden\");\n};\n\nApp.toggleHidden = function (idlist) {\n  for (let i = 0; i<idlist.length; i++) {\n    document.getElementById(idlist[i]).classList.toggle(\"hidden\");\n  }\n};\n\n/* * * * * * * * * * * * * * * * * * * * */\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });